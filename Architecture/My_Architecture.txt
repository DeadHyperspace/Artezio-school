1.  Я бы стал реализовывать клиент-серверную
многопользовательскую систему на примере - мессенджера.
2.  Для мессенджера отлично подходит трехуровневая архитектура.
3.1 В моем мессенджере упор будет на скорость, нетребовательность, безопасность, маштабируемость и надёжность данных, как для сервера так и для клиента.
	Трёхуровневая архитектура - архитектурная модель программного комплекса,
	предполагающая наличие в нём трёх компонентов: клиента, сервера приложений и сервера баз данных.
	Выбор архитектуры обусловлен её выосокой надёжностью, маштабируемостью, безопасностью, и производительностью.
3.2 В моей системе есть клиент, сервера приложений и сервер БД.

	Клиент - интерфейс который предоставляется пользователю. Здесь будет простейшая бизнес-логика:
		авторизация
		алгоритмы шифрования
		проверка допустимых значений на допустимость и соответсвие формату
		несложные операции с данными
	По сути это то что будет ставить на свою "машину" пользователь, затем он будет регистрироваться/авторизироваться, а затем использовать
	
	Сервер приложений - будет вторым уровнем. На нём будет большинство бизнес-логики:
		координация программы
		обработка команд
		выполнение логических и арифметических операций
		расчёты
	Те вся работа приложения будет завязана на этом уровне архитектуры.
	Он будет следить за правильностью работы приложения, обрабатывать команды пользователя (от банального сообщения до настройки встроенного Proxy),
	и незаметно для пользователя будет выполнять необходимые расчёты и операции.
	
	Сервер БД - хранилище данных, к которому не должен иметь доступа клиент. Он будет реализовыван посредством СУБД.
	На нём будут храниться все данные приложения, со всех трёх уровней.
3.3 Клиент будет отправлять запросы на сервер приложений, а он в свою очередь будет обрабатывать его и отправлять на сервер БД.
	Сервер БД будет возвращать результат запроса серверу приложений, тот будет преобразовывать его в понятный для пользователя вид и отправлять клиенту.
3.4 Данная архитектура решает проблемы производительности, надежности и безопасности за счёт использованния трёхуровневой архитектуры. Её преимущества:
	производительность
		Позволяет использовать высокоскоростные сетевые соединения между серверами, и отдавать на клиент только результат запроса.
        Выполнение запроса может быть распределено между разнымисерверами.
		Позволяет более гибко управлять масштабированием.
	надёжность
		позволяет организовывать отказоустойчивые контуры на каждом слое за счет резервирования серверов.
		В трехуровневой архитектуре сервер приложений может кэшировать ответы от сервера БД и использовать их на время
		недоступности сервера БД
	безопасность
		позволяет организовать проверки безопасности на каждом уровне.
		Клиент не имеет прямого доступа к серверу БД.